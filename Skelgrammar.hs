module Skelgrammar where

-- Haskell module generated by the BNF converter

import Absgrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  Prog defs  -> failure x


transDef :: Def -> Result
transDef x = case x of
  DefFun id ids exp  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  ELambda id exp  -> failure x
  EIfElse exp0 exp1 exp  -> failure x
  EPlus exp0 exp  -> failure x
  EMinus exp0 exp  -> failure x
  ELessThan exp0 exp  -> failure x
  EApply exp0 exp  -> failure x
  EInteger n  -> failure x
  EIdent id  -> failure x



