-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Pargrammar where
import Absgrammar
import Lexgrammar
import ErrM
}

%name pProgram Program
%name pDef Def
%name pListDef ListDef
%name pListIdent ListIdent
%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token 
 '=' { PT _ (TS "=") }
 ';' { PT _ (TS ";") }
 '\\' { PT _ (TS "\\") }
 '->' { PT _ (TS "->") }
 '+' { PT _ (TS "+") }
 '-' { PT _ (TS "-") }
 '<' { PT _ (TS "<") }
 '(' { PT _ (TS "(") }
 ')' { PT _ (TS ")") }
 'else' { PT _ (TS "else") }
 'if' { PT _ (TS "if") }
 'then' { PT _ (TS "then") }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_err    { _ }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read $1) :: Integer }

Program :: { Program }
Program : ListDef { Prog (reverse $1) } 


Def :: { Def }
Def : Ident ListIdent '=' Exp ';' { DefFun $1 (reverse $2) $4 } 


ListDef :: { [Def] }
ListDef : {- empty -} { [] } 
  | ListDef Def { flip (:) $1 $2 }


ListIdent :: { [Ident] }
ListIdent : {- empty -} { [] } 
  | ListIdent Ident { flip (:) $1 $2 }


Exp :: { Exp }
Exp : '\\' Ident '->' Exp { ELambda $2 $4 } 
  | 'if' Exp 'then' Exp 'else' Exp { EIfElse $2 $4 $6 }
  | Exp1 { $1 }


Exp1 :: { Exp }
Exp1 : Exp1 '+' Exp2 { EPlus $1 $3 } 
  | Exp1 '-' Exp2 { EMinus $1 $3 }
  | Exp1 '<' Exp2 { ELessThan $1 $3 }
  | Exp2 { $1 }


Exp2 :: { Exp }
Exp2 : Exp2 Exp3 { EApply $1 $2 } 
  | Exp3 { $1 }


Exp3 :: { Exp }
Exp3 : Integer { EInteger $1 } 
  | Ident { EIdent $1 }
  | '(' Exp ')' { $2 }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map prToken (take 4 ts))

myLexer = tokens
}

